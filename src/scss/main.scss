$items-count: 21; // corresponds to the number of divs in your HTML

// Define animation
@keyframes move {
  0% {
    transform: scaleY(1);
  }

  100% {
    transform: scaleY(1.4);
  }
}

// Mixin to use animation
@mixin add-move-animation($duration) {
  animation-name: move;
  animation-duration: $duration;
  animation-iteration-count: infinite;
  animation-direction: alternate;
  animation-timing-function: linear;
}

body {
  background-color: lightblue;
  margin: 0;
}

.items-container {
  display: grid;
  grid-template-columns: repeat($items-count, 1fr);
  grid-template-rows: 1fr;
  height: 100vh;
}

// For loop to randomize values for each div bar
@for $i from 1 through $items-count {
  .item:nth-child(#{$i}) {
    background: linear-gradient(
      to bottom right,
      lighten(violet, random(40)),
      rgba(darken(violet, random(10)), 1)
    );
    // random() will return a number between 1-100 with no argument being passed to it, or when you pass in a single integer parameter to define the upper limit. random(20) will return a number between 1-20.
    height: random(60) + 10 + vh;
    border-radius: 0 0 ((random(50) + 10 + px)) ((random(50) + 10 + px));
    transform-origin: 0 0;

    @if (($i == 2) or ($i == 9) or ($i == 16)) {
      border-radius: 0 0 ((random(50) + 10 + px)) ((random(50) + 10 + px));
      background: linear-gradient(
        to top right,
        lighten(indigo, random(40)),
        rgba(darken(indigo, random(10)), 1)
      );
    }
    @if (($i == 3) or ($i == 10) or ($i == 17)) {
      border-radius: 0 0 ((random(50) + 10 + px)) ((random(50) + 10 + px));
      background: linear-gradient(
        to top right,
        lighten(blue, random(40)),
        rgba(darken(blue, random(10)), 1)
      );
    }
    @if (($i == 4) or ($i == 11) or ($i == 18)) {
      border-radius: 0 0 ((random(50) + 10 + px)) ((random(50) + 10 + px));
      background: linear-gradient(
        to top right,
        lighten(green, random(40)),
        rgba(darken(green, random(10)), 1)
      );
    }
    @if (($i == 5) or ($i == 12) or ($i == 19)) {
      border-radius: 0 0 ((random(50) + 10 + px)) ((random(50) + 10 + px));
      background: linear-gradient(
        to top right,
        lighten(yellow, random(40)),
        rgba(darken(yellow, random(15)), 1)
      );
    }
    @if (($i == 6) or ($i == 13) or ($i == 20)) {
      border-radius: 0 0 ((random(50) + 10 + px)) ((random(50) + 10 + px));
      background: linear-gradient(
        to top right,
        lighten(orange, random(40)),
        rgba(darken(orange, random(10)), 1)
      );
    }
    @if (($i == 7) or ($i == 14) or ($i == 21)) {
      border-radius: 0 0 ((random(50) + 10 + px)) ((random(50) + 10 + px));
      background: linear-gradient(
        to top right,
        lighten(red, random(40)),
        rgba(darken(red, random(10)), 1)
      );
    }
    // The lighten() function increases lightness by a fixed amount.
    // The darken() function decreases lightness by a fixed amount.
    @include add-move-animation(random(3) + 1 + s);
  }
}

// .item:nth-child(odd) {
//   align-self: end;
//   transform-origin: 0 100%;
// }
